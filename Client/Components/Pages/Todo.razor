@page "/todo"
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation

<PageTitle>Мои задачи</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Мои задачи</h2>
        <div>
            <button class="btn btn-primary me-2" @onclick="ShowCreateModal">Создать задачу</button>
            <button class="btn btn-outline-secondary" @onclick="Logout">Выйти</button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Загрузка...</span>
            </div>
        </div>
    }
    else if (todos.Any())
    {
        <div class="row">
            @foreach (var todo in todos)
            {
                <div class="col-md-6 col-lg-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@todo.Title</h5>
                            @if (!string.IsNullOrEmpty(todo.Description))
                            {
                                <p class="card-text">@todo.Description</p>
                            }
                            @if (todo.Deadline.HasValue)
                            {
                                <small class="text-muted">
                                    Дедлайн: @todo.Deadline.Value.ToString("dd.MM.yyyy HH:mm")
                                </small>
                            }
                            <div class="mt-2">
                                <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditTodo(todo)">
                                    Редактировать
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteTodo(todo.Id)">
                                    Удалить
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center">
            <p>У вас пока нет задач</p>
        </div>
    }
</div>

<!-- Модальное окно для создания/редактирования задачи -->
@if (showModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingTodo == null ? "Создать задачу" : "Редактировать задачу")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="todoForm" OnValidSubmit="SaveTodo">
                        <div class="mb-3">
                            <label class="form-label">Название*</label>
                            <InputText @bind-Value="todoForm.Title" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Описание</label>
                            <InputTextArea @bind-Value="todoForm.Description" class="form-control" rows="3" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Дедлайн</label>
                            <InputDate @bind-Value="deadlineDate" class="form-control" />
                            <InputText @bind-Value="deadlineTime" class="form-control mt-1" placeholder="HH:mm" />
                        </div>
                        @if (!string.IsNullOrEmpty(modalError))
                        {
                            <div class="alert alert-danger">@modalError</div>
                        }
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Отмена</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Сохранить
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<TodoItem> todos = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isSaving = false;
    private TodoItem? editingTodo = null;
    private CreateTodoRequest todoForm = new();
    private string modalError = string.Empty;

    private DateOnly? deadlineDate;
    private string deadlineTime = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadTodos();
    }

    private async Task LoadTodos()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("API");
            var response = await httpClient.GetAsync("/api/todo");

            if (response.IsSuccessStatusCode)
            {
                todos = await response.Content.ReadFromJsonAsync<List<TodoItem>>() ?? new();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception)
        {
            Navigation.NavigateTo("/");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowCreateModal()
    {
        editingTodo = null;
        todoForm = new CreateTodoRequest();
        deadlineDate = null;
        deadlineTime = string.Empty;
        modalError = string.Empty;
        showModal = true;
    }

    private void EditTodo(TodoItem todo)
    {
        editingTodo = todo;
        todoForm = new CreateTodoRequest
        {
            Title = todo.Title,
            Description = todo.Description,
            Deadline = todo.Deadline
        };

        if (todo.Deadline.HasValue)
        {
            deadlineDate = DateOnly.FromDateTime(todo.Deadline.Value);
            deadlineTime = todo.Deadline.Value.ToString("HH:mm");
        }
        else
        {
            deadlineDate = null;
            deadlineTime = string.Empty;
        }

        modalError = string.Empty;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        editingTodo = null;
        modalError = string.Empty;
    }

    private async Task SaveTodo()
    {
        if (string.IsNullOrWhiteSpace(todoForm.Title))
        {
            modalError = "Название обязательно";
            return;
        }

        isSaving = true;
        modalError = string.Empty;

        try
        {
            // Объединяем дату и время
            if (deadlineDate.HasValue)
            {
                var time = TimeOnly.MinValue;
                if (!string.IsNullOrEmpty(deadlineTime) && TimeOnly.TryParse(deadlineTime, out var parsedTime))
                {
                    time = parsedTime;
                }
                todoForm.Deadline = deadlineDate.Value.ToDateTime(time);
            }
            else
            {
                todoForm.Deadline = null;
            }

            var httpClient = HttpClientFactory.CreateClient("API");
            HttpResponseMessage response;

            if (editingTodo == null)
            {
                response = await httpClient.PostAsJsonAsync("/api/todo", todoForm);
            }
            else
            {
                response = await httpClient.PutAsJsonAsync($"/api/todo/{editingTodo.Id}", todoForm);
            }

            if (response.IsSuccessStatusCode)
            {
                CloseModal();
                await LoadTodos();
            }
            else
            {
                modalError = "Ошибка сохранения задачи";
            }
        }
        catch (Exception)
        {
            modalError = "Ошибка подключения к серверу";
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteTodo(int id)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Удалить задачу?"))
            return;

        try
        {
            var httpClient = HttpClientFactory.CreateClient("API");
            var response = await httpClient.DeleteAsync($"/api/todo/{id}");

            if (response.IsSuccessStatusCode)
            {
                await LoadTodos();
            }
        }
        catch (Exception)
        {
            // Игнорируем ошибки удаления
        }
    }

    private async Task Logout()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("API");
            await httpClient.PostAsync("/api/auth/logout", null);
        }
        catch (Exception)
        {
            // Игнорируем ошибки выхода
        }
        finally
        {
            Navigation.NavigateTo("/");
        }
    }

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
}